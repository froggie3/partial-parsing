#!/usr/bin/env bash

# Demonstration of command-line chaining with argparse

. assert-sh/assert.sh
poetry shell >/dev/null 2>&1

(
expected="Helo world!"
actual=$(printf "Hello woooorld!!\n" | python3 src/partial_parse/main.py uniq) 
assert_eq "$expected" "$actual" "not equivalent!"
) &

(
expected="H=1@e=1@l=2@o=1@ =1@w=1@o=4@r=1@l=1@d=1@!=2" 
actual=$(printf 'Hello woooorld!!\n' | python3 src/partial_parse/main.py uniq -c) 
assert_eq "$expected" "$actual" "not equivalent!"
) &

(
expected=$(cat <<EOF
H=1
e=1
l=2
o=1
 =1
w=1
o=4
r=1
l=1
d=1
!=2
EOF
)
actual=$(printf 'Hello woooorld!!\n' | python3 src/partial_parse/main.py uniq -c tr "@" $'\n')
assert_eq "$expected" "$actual" "not equivalent!"
) &

(
expected=$(cat <<EOF
usage: tr [-h] string1 string2

Translate characters using string replacement.

positional arguments:
  string1     the string set the character should be replaced.
  string2     the string set the character to be replaced.

options:
  -h, --help  show this help message and exit
EOF
)
actual=$(python3 src/partial_parse/main.py tr --help) 
assert_eq "$expected" "$actual" "not equivalent!"

actual=$(python3 src/partial_parse/main.py tr a b --help) 
assert_eq "$expected" "$actual" "not equivalent!"
) &

(
expected=$(cat <<EOF
usage: uniq [-h] [-c]

Filter adjacent duplicates with counts.

options:
  -h, --help   show this help message and exit
  -c, --count  show counts of each duplicate
EOF
)
actual=$(python3 src/partial_parse/main.py tr 'l' '1' uniq --help) 
assert_eq "$expected" "$actual" "not equivalent!"

actual=$(python3 src/partial_parse/main.py tr 'l' '1' --help uniq -c)
assert_eq "$expected" "$actual" "not equivalent!"
) &

exit
